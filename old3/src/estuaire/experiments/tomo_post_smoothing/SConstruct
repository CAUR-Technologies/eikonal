# vim: filetype=python
#
#
#

import os

env = Environment(tools = ['Lotic'])

env['TOMOGRAPHY_SCRIPT_DIR'] = \
        '/home/jee/work/AGSIS-local/development/eikonal-ng/eikonal/clapi'
env['REPORT_ROOT'] = 'build/report'
env['REPORT_RESIDUAL_HISTOGRAM_RANGE'] = [-0.015, 0.015]
env['INVERSION_TOMOGRAPHY_GTOL'] = 1e-60


# VARIABLE Descriptions
db          = '/home/jee/data/syn_50_new.h5f';
group       = env.Value('syn');             group.name = 'group'
catalog     = env.Value('original');        catalog.name = 'catalog'
filters     = env.Value([dict(name = "cuboid",
                              args = [(1,1,1), (125,125,125), 0])]); filters.name = 'filters'
#ptype       = env.Value(['P-Wave', 'S-Wave']);          ptype.name = 'ptype'
ptype       = env.Value(['P-Wave']);          ptype.name = 'ptype'

shape       = env.Value((64, 64, 64));          shape.name = 'shape'
spacing     = env.Value(2.0);                   spacing.name = 'spacing'
ispacing    = env.Value(1.0 / spacing.value);   ispacing.name = 'ispacing'
origin      = env.Value((0, 0, 0));             origin.name = 'origin'
s_ivalue    = env.Value(2500);                  s_ivalue.name = 's_ivalue'
p_ivalue    = env.Value(4000);                  p_ivalue.name = 'p_ivalue'

pvalue      = 0.00001 ** 2

priors       = [env.Value(0.00000000001), env.Value(0.00000000001)]

weighting   = env.Value(dict(name = "uniform", args = [])); weighting.name = 'weighting'

VP_grid_tgt = env.VelocityGrid(['build/p_velocity0.npy'], [shape, p_ivalue])
VS_grid_tgt = env.VelocityGrid(['build/s_velocity0.npy'], [shape, s_ivalue])

fetch_tgt = env.FetchDB(['build/fresh/events.npy',
                         'build/fresh/stations.npy'], [db, group, catalog, filters, ptype, env.Value("build/fresh/S${sid}_${ptype}.pickle")])

ev_tgt = env.EuclidianTransform(['build/initial/events.npy'],
                                [fetch_tgt[0], origin, ispacing])[0]

st_tgt = env.EuclidianTransform(['build/initial/stations.npy'],
                                [fetch_tgt[1], origin, ispacing])[0]

tt_tgt = [fetch_tgt[2:]]

reports = []

eik_tgt, fre_tgt = env.ForwardModelling2(ev_tgt, st_tgt, tt_tgt[0], VP_grid_tgt[0],
                                         spacing,
                                         "build/imodel/eikonal_${basename}",
eik_tgt = [eik_tgt]
fre_tgt = [fre_tgt]

i = 0
j = 0


for e in [10, 10, 6, 6, 5, 5, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]:
    priors = [pvalue / (2 ** (i / 4))]
    ieta = [0, 0]
    smooth_op = env.RegularizationOperator(shape.value, eta = ieta)


    (ev_tgt, st_tgt, eik_tgt, fre_tgt, tt_tgt, VP_grid_tgt), invstats = \
            env.TomographyIteration(ev_tgt, st_tgt, eik_tgt, fre_tgt, tt_tgt,
                                    VP_grid_tgt, spacing.value, weighting.value,
                                    smooth_op, priors, root = 'build/inv%d' %i, sigma = e)


    reports.append(env.ResidualHistogramReport([], fre_tgt)[0])
    reports.append(env.InversionReport([], invstats)[0])

    i += 1

for e in [2, 2, 2, 2, 2, 2, 2, 2, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]:
    priors = [pvalue / (2 ** (i / 3))]
    ieta = [0, 0]
    smooth_op = env.RegularizationOperator(shape.value, eta = ieta)


    (ev_tgt, st_tgt, eik_tgt, fre_tgt, tt_tgt, VP_grid_tgt), invstats = \
            env.TomographyIteration(ev_tgt, st_tgt, eik_tgt, fre_tgt, tt_tgt,
                                    VP_grid_tgt, spacing.value, weighting.value,
                                    smooth_op, priors, root = 'build/inv%d' %i, sigma = e)


    reports.append(env.ResidualHistogramReport([], fre_tgt)[0])
    reports.append(env.InversionReport([], invstats)[0])

    i += 1


report = env.ConcatenateReport([], ["../../css/default.css", reports])


Default(report)





