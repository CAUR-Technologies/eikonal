import os

import slopes
import dbfilter

import agstd.log

import logging
logging.getLogger().setLevel(logging.DEBUG)

env = Environment(tools = ['Lotic'])

env['TOMOGRAPHY_SCRIPT_DIR'] = \
        '/home/jee/work/AGSIS-local/development/eikonal-ng/eikonal/clapi'
env['REPORT_ROOT'] = 'build/report'
env['REPORT_RESIDUAL_HISTOGRAM_RANGE'] = [-0.015, 0.015]
env['INVERSION_TOMOGRAPHY_GTOL'] = 1e-10


# VARIABLE Descriptions Database
db          = '/home/jee/data/syn_50_new.h5f';
group       = env.Value('syn')
catalog     = env.Value('original')
filters     = env.Value([dbfilter.CuboidFilter((1,1,1), (125, 125, 125))])
origin      = env.Value((0, 0, 0))

ptype       = env.Value(['P-Wave'])

# Grid Inversion Description
shape       = env.Value((64, 64, 64))
spacing     = env.Value(2.0)
ispacing    = env.Value(1.0 / spacing.value)

p_ivalue    = env.Value(4000)

init_prior      = 0.00001 ** 2


# DB Extraction
VP_grid_tgt = env.HomogenousGrid(['build/p_velocity0.npy'], [shape, p_ivalue])[0]

fetch_tgt = env.FetchDB(['build/fresh/events.npy',
                         'build/fresh/stations.npy'],
                        [db, group, catalog, filters, ptype, env.Value("build/fresh/S${sid}_${ptype}.pickle")])

tt_tgt = fetch_tgt[2:]

ev_tgt = env.TableTransform(['build/initial/events.npy'],
                                [fetch_tgt[0], origin, ispacing])[0]

st_tgt = env.TableTransform(['build/initial/stations.npy'],
                                [fetch_tgt[1], origin, ispacing])[0]

# Forward Modelling

eik_tgt, fre_tgt = env.ForwardModelling2(ev_tgt, st_tgt, tt_tgt, VP_grid_tgt,
                                         spacing,
                                         "build/imodel/eikonal_${basename}",
                                         "build/imodel/frechet_${basename}")


plan = slopes.InversionPlan(env, ev_tgt, st_tgt, spacing.value, shape.value)
plan.insert_velocity_grid(VP_grid_tgt, "one", tt_tgt, eik_tgt, fre_tgt)

import numpy as np
ma = 200 # This is the way the exponential behave
sigmas = slopes.exprange(ma, (15, 3), size = 20)
priors = slopes.exprange(ma, (init_prior, init_prior / 10000.0), size = 30)
print priors

def compare(target, source, env):
    import numpy as np
    import scipy as sc
    import scipy.stats
    import scipy.ndimage

    spacing = source[0].value
    initial = scipy.ndimage.zoom(np.load(str(source[1])), 1.0 / spacing)
    r = [sc.stats.pearsonr(np.load(str(s)).ravel(), initial.ravel())[0] for s in source[2:]]
    d = [np.average(np.abs(np.load(str(s)) - initial)) for s in source[2:]]

    np.save(str(target[0]), np.array(r))
    np.save(str(target[1]), np.array(d))


for i, (e, p) in enumerate(zip(sigmas, priors)):
    plan.set_velocity_grid_params("one", prior = p)
    plan.push_tomography("build/tomo_%d" % i , sigma = e)
    #plan.push_stime_correction("build/st_%d" % i, p, shape.value)
    #plan.push_etime_correction("build/et_%d" % i, p, shape.value)



targets = [[v2['grid'] for v2 in v.values()] for v in plan.vgrids[::2]]
targets = np.concatenate(targets)
plan.build_description()
env.Default(env.Command( ["r_%d.npy" % ma, "d_%d.npy" % ma], [spacing, '/home/jee/data/test/Vp_rand.npy'] + targets.tolist(), compare))
#targets = [plan.report("../../css/default.css")]
env.Decider('MD5-timestamp')


#
#
# vim: filetype=python
#
